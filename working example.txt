
#define PIN_ETH_CS 17
#define PIN_ETH_IRQ 21

#include <SPI.h>
#include <W5500lwIP.h>
#include <WebServer.h>

#include <ArduinoRS485.h> // ArduinoModbus depends on the ArduinoRS485 library
#include <ArduinoModbus.h>

const int ledPin = LED_BUILTIN;

int status = WL_IDLE_STATUS;

Wiznet5500lwIP eth(PIN_ETH_CS, SPI, PIN_ETH_IRQ);
WiFiServer wifiServer(502);
ModbusTCPServer modbusTCPServer;

void updateLED() {
    // read the current value of the coil
    int coilValue = modbusTCPServer.coilRead(0x00);
  
    if (coilValue) {
      // coil value set, turn LED on
      digitalWrite(ledPin, HIGH);
    } else {
      // coild value clear, turn LED off
      digitalWrite(ledPin, LOW);
    }
  }

void setup() {
  //Initialize serial and wait for port to open:
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

  Serial.println("Modbus TCP Server LED");

  // attempt to connect to WiFi network:
  while (!eth.begin()) {
    Serial.println("Attempting to connect to LAN: ");
    delay(5000);
  }
  delay(5000);
  Serial.print("Connected to LAN: ");
  Serial.println(eth.localIP());

  // start the server
  wifiServer.begin();

  // start the Modbus TCP server
  if (!modbusTCPServer.begin()) {
    Serial.println("Failed to start Modbus TCP Server!");
    while (1);
  }

  // configure the LED
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);

  // configure a single coil at address 0x00
  modbusTCPServer.configureCoils(0x00, 1);
}

void loop() {
  // listen for incoming clients
  WiFiClient client = wifiServer.accept();
  
  if (client) {
    // a new client connected
    Serial.println("new client");

    // let the Modbus TCP accept the connection 
    modbusTCPServer.accept(client);

    while (client.connected()) {
      // poll for Modbus TCP requests, while client connected
      modbusTCPServer.poll();

      // update the LED
      updateLED();
    }

    Serial.println("client disconnected");
  }
}